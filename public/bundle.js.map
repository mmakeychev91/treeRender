{"version":3,"file":"bundle.js","mappings":";;;;AAAA;AACA,MAAMA,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;AAClD,MAAMC,KAAK,GAAGF,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;AACjD,MAAME,QAAQ,GAAGH,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;;AAErD;AACAF,OAAO,CAACK,gBAAgB,CAAC,OAAO,EAAE,MAAM;EACpC,MAAMC,UAAU,GAAGH,KAAK,CAACI,KAAK;EAC9B,MAAMC,KAAK,GAAGC,kBAAkB,CAACH,UAAU,CAAC;EAC5C,MAAMI,IAAI,GAAGC,iBAAiB,CAACH,KAAK,CAAC;EACrCJ,QAAQ,CAACQ,SAAS,GAAGF,IAAI;AAC7B,CAAC,CAAC;;AAEF;AACA,MAAMD,kBAAkB,GAAII,MAAM,IAAK;EACnCA,MAAM,GAAGC,YAAY,CAACD,MAAM,CAAC;;EAE7B;EACA,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,MAAM,CAACA,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACxDF,MAAM,GAAGA,MAAM,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC;EAEA,MAAMC,KAAK,GAAG,EAAE;EAChB,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIC,cAAc,GAAG,EAAE,CAAC,CAAC;;EAEzB,KAAK,IAAIC,IAAI,IAAIP,MAAM,EAAE;IACrB,IAAIO,IAAI,KAAK,GAAG,EAAE;MACd;MACA,IAAID,cAAc,EAAE;QAChBD,YAAY,CAACG,IAAI,CAACF,cAAc,CAAC;QACjCA,cAAc,GAAG,EAAE;MACvB;MACAF,KAAK,CAACI,IAAI,CAACH,YAAY,CAAC;MACxBA,YAAY,GAAG,EAAE;IACrB,CAAC,MAAM,IAAIE,IAAI,KAAK,GAAG,EAAE;MACrB;MACA,IAAID,cAAc,EAAE;QAChBD,YAAY,CAACG,IAAI,CAACF,cAAc,CAAC;QACjCA,cAAc,GAAG,EAAE;MACvB;MACA,MAAMG,SAAS,GAAGJ,YAAY;MAC9BA,YAAY,GAAGD,KAAK,CAACM,GAAG,CAAC,CAAC;MAC1BL,YAAY,CAACG,IAAI,CAACC,SAAS,CAAC;IAChC,CAAC,MAAM,IAAIF,IAAI,KAAK,GAAG,EAAE;MACrB;MACAD,cAAc,IAAIC,IAAI;IAC1B,CAAC,MAAM,IAAIA,IAAI,KAAK,GAAG,IAAID,cAAc,EAAE;MACvC;MACAD,YAAY,CAACG,IAAI,CAACF,cAAc,CAAC;MACjCA,cAAc,GAAG,EAAE;IACvB;EACJ;;EAEA;EACA,IAAIA,cAAc,EAAE;IAChBD,YAAY,CAACG,IAAI,CAACF,cAAc,CAAC;EACrC;EAEA,OAAOD,YAAY;AACvB,CAAC;;AAED;AACA,MAAMJ,YAAY,GAAID,MAAM,IAAK;EAC7B,OAAOA,MAAM,CAACW,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;;AAED;AACA,MAAMd,iBAAiB,GAAIe,GAAG,IAAK;EAC/B,IAAIhB,IAAI,GAAG,MAAM;EACjBgB,GAAG,CAACC,OAAO,CAACC,IAAI,IAAI;IAChB,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;MACrB;MACAlB,IAAI,IAAI,OAAOC,iBAAiB,CAACiB,IAAI,CAAC,OAAO;IACjD,CAAC,MAAM;MACH;MACAlB,IAAI,IAAI,OAAOkB,IAAI,OAAO;IAC9B;EACJ,CAAC,CAAC;EACFlB,IAAI,IAAI,OAAO;EACf,OAAOA,IAAI;AACf,CAAC,C","sources":["webpack://tree-render/./src/main.js"],"sourcesContent":["// Переменные\nconst drawBtn = document.querySelector('.js-draw');\nconst input = document.querySelector('.js-input');\nconst treeWrap = document.querySelector('.tree-wrap');\n\n// Подписываемся и обрабатываем событие клика на кнопку \"отрисовать\"\ndrawBtn.addEventListener('click', () => {\n    const inputValue = input.value;\n    const array = parseStringToArray(inputValue);\n    const html = renderArrayToHTML(array);\n    treeWrap.innerHTML = html;\n});\n\n// Метод, который преобразует строку в массив \nconst parseStringToArray = (string) => {\n    string = removeSpaces(string);\n\n    // Удаляем первую и последнюю скобку, если они есть\n    if (string[0] === '(' && string[string.length - 1] === ')') {\n        string = string.slice(1, -1);\n    }\n\n    const stack = [];\n    let currentArray = [];\n    let currentElement = ''; // Для накопления символов числа или букв\n\n    for (let char of string) {\n        if (char === '(') {\n            // Начало нового вложенного массива\n            if (currentElement) {\n                currentArray.push(currentElement);\n                currentElement = '';\n            }\n            stack.push(currentArray);\n            currentArray = [];\n        } else if (char === ')') {\n            // Конец текущего вложенного массива\n            if (currentElement) {\n                currentArray.push(currentElement);\n                currentElement = '';\n            }\n            const lastArray = currentArray;\n            currentArray = stack.pop();\n            currentArray.push(lastArray);\n        } else if (char !== ' ') {\n            // Накопление символов в текущий элемент (число или строка)\n            currentElement += char;\n        } else if (char === ' ' && currentElement) {\n            // Когда встречаем пробел, добавляем текущий элемент (число или строку) в массив\n            currentArray.push(currentElement);\n            currentElement = '';\n        }\n    }\n\n    // Добавляем последний накопленный элемент, если он есть\n    if (currentElement) {\n        currentArray.push(currentElement);\n    }\n\n    return currentArray;\n};\n\n// Метод удаляет пробелы\nconst removeSpaces = (string) => {\n    return string.replace(/\\s+/g, ' ').trim(); // Преобразуем множественные пробелы в один\n};\n\n// Метод рендерит дерево списков\nconst renderArrayToHTML = (arr) => {\n    let html = '<ul>';\n    arr.forEach(item => {\n        if (Array.isArray(item)) {\n            // Если элемент - это массив, создаем вложенный список\n            html += `<li>${renderArrayToHTML(item)}</li>`;\n        } else {\n            // Если элемент - число или строка, добавляем отдельный элемент списка\n            html += `<li>${item}</li>`;\n        }\n    });\n    html += '</ul>';\n    return html;\n};\n"],"names":["drawBtn","document","querySelector","input","treeWrap","addEventListener","inputValue","value","array","parseStringToArray","html","renderArrayToHTML","innerHTML","string","removeSpaces","length","slice","stack","currentArray","currentElement","char","push","lastArray","pop","replace","trim","arr","forEach","item","Array","isArray"],"sourceRoot":""}